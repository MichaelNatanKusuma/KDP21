@*@model IEnumerable<LinqToSQLMvcApplication.Models.PublisherModel>*@
@using PagedList.Mvc

@{
    ViewBag.Title = "Index";
    Layout = "~/Views/Shared/_Layout.cshtml";
    var pageSize = ViewBag.PageSize ?? 5; // Default to 5 if ViewBag.PageSize is null
}

<head>
    <link rel="stylesheet" type="text/css" href="https://cdn.datatables.net/1.10.21/css/jquery.dataTables.css">
    <link rel="stylesheet" type="text/css" href="https://cdn.datatables.net/2.1.8/css/dataTables.dataTables.css">
</head>

<style>
    #publisherListTable {
        width: 100%;
        table-layout: auto; /* Automatically adjust column width */
    }
    #publisherListTable_wrapper {
        overflow-x: auto;
    }
/*    .dataTables_wrapper .dataTables_paginate {
        float: none;
        text-align: center;
    }

    .dataTables_wrapper .dataTables_info {
        float: left;
        padding-top: 0.755em;
    }

    .dataTables_wrapper .bottom {
        display: flex;
        justify-content: space-between;
        align-items: center;
    }*/
   
</style>

<h2>Publisher's List</h2>

<p>
    @Html.ActionLink("Create New", "Create")
    @*@Html.ActionLink("Books", "Index", "Book")*@
</p>
<div>
    <h2>Export to Excel</h2>
    <button id="exportButton" style="margin-bottom:13px">Export to Excel</button>
</div>
<!-- Search Form -->
@*@using (Html.BeginForm("Index", "Publisher", FormMethod.Get, new { id = "searchForm" }))
    {
        <p>
            Find by name: @Html.TextBox("SearchString", ViewBag.CurrentFilter as string)
            <input type="submit" value="Search" />
        </p>
    }*@

<!-- Sort Links -->
@*<div class="sort-links">
        <a href="@Url.Action("Index", new { sortOrder = ViewBag.NameSortParm, currentFilter = ViewBag.CurrentFilter, page = 1 })" class="sort-link">Sort by Name</a> |
        <a href="@Url.Action("Index", new { sortOrder = ViewBag.YearSortParm, currentFilter = ViewBag.CurrentFilter, page = 1 })" class="sort-link">Sort by Year</a>
    </div>*@
<!-- New: Rows per Page Dropdown -->
@*<form method="get" action="@Url.Action("Index")">
        <select name="pageSize" class="form-control" style="width: 100px; display: inline-block;" onchange="this.form.submit();">
            <option value="10" @(ViewBag.PageSize == 10 ? "selected" : "")>10</option>
            <option value="25" @(ViewBag.PageSize == 25 ? "selected" : "")>25</option>
            <option value="50" @(ViewBag.PageSize == 50 ? "selected" : "")>50</option>
            <option value="0" @(ViewBag.PageSize == ViewBag.TotalPublishers ? "selected" : "")>All</option>
        </select>
    </form>*@

<!-- Publisher Table -->
<div id="publisherList">
    @*@Html.Partial("_PublisherList", Model)*@
    <table class="table" id="publisherListTable">
        <thead>
            <tr>

                @*@Html.ActionLink("Name", "Index", new { sortOrder = ViewBag.NameSortParm })*@
                <th>Name</th>

                <th>Year</th>

            </tr>
        </thead>

    </table>
</div>


<!-- Pagination Links -->
@*<div id="paginationLinks">
        @Html.PagedListPager(Model, page => Url.Action("Index", new { page, sortOrder = ViewBag.CurrentSort, currentFilter = ViewBag.CurrentFilter, pageSize = ViewBag.PageSize }))
    </div>*@
<!-- Search and Sort Section -->
@*<div class="form-inline mb-3">
        <input type="text" id="searchTerm" class="form-control mr-2" placeholder="Search Publisher" />
        <select id="sortOrder" class="form-control mr-2">
            <option value="asc">Sort by Name (A-Z)</option>
            <option value="desc">Sort by Name (Z-A)</option>
        </select>
        <button id="searchButton" class="btn btn-primary">Search and Sort</button>
    </div>
    <div id="publisherList">
        @Html.Partial("_PublisherList", Model)*@
@*<table class="table">
        <tr>
            <th>
                @Html.DisplayNameFor(model => model.Name)
            </th>
            <th>
                @Html.DisplayNameFor(model => model.Year)
            </th>
            <th></th>
        </tr>

        @foreach (var item in Model)
        {
            <tr>
                <td>
                    @Html.DisplayFor(modelItem => item.Name)
                </td>
                <td>
                    @Html.DisplayFor(modelItem => item.Year)
                </td>
                <td>
                    @Html.ActionLink("Edit", "Edit", new { id = item.Id }) |
                    @Html.ActionLink("Details", "Details", new { id = item.Id }) |
                    @Html.ActionLink("Delete", "Delete", new { id = item.Id })
                </td>
            </tr>
        }

    </table>*@
@*</div>*@

@section scripts {
    <script src="https://ajax.googleapis.com/ajax/libs/jquery/3.5.1/jquery.min.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>
    <script type="text/javascript" charset="utf8" src="https://code.jquery.com/jquery-3.5.1.js"></script>
    <script type="text/javascript" charset="utf8" src="https://cdn.datatables.net/1.10.21/js/jquery.dataTables.js"></script>
    <script>
        @*$(document).ready(function () {
            $('#searchButton').click(function () {
                var searchTerm = $('#searchTerm').val();
                var sortOrder = $('#sortOrder').val();

                $.ajax({
                    uql: '@Url.Action("SearchAndSort", "Publisher")',
                    type: 'POST',
                    data: { searchTerm: searchTerm, sortOrder: sortOrder },
                    success: function (result) {
                        $('#publisherList').html(result);
                    },
                    error: function (xhr, status, error) {
                        console.error("Error: " + error);
                    }
                });
            });
        });*@
        //Handle DataTable Logic
        $(document).ready(function () {
            $('#publisherListTable').DataTable({
                "ajax": {
                    "url": "/Publisher/GetData",
                    "type": "GET",
                    "datatype": "json"
                },
                "columns": [
                    { "data": "Name" },
                    { "data": "Year" }
                ],
                "scrollY": "400px",       // Set the height of the table for scrolling
                "scrollCollapse": true,
                //scrollX: true
                
            });
        });
        // Handle pagination, sorting, and search with AJAX
        $(document).on("click", ".pagination a, .sort-link", function (e) {
            e.preventDefault();  //-- Prevent default link click behavior
            var url = $(this).attr("href");  //-- Get the URL from the clicked link
            loadPage(url);  //-- Load the page with the URL using AJAX
        });

        //$('#rowsPerPage').change(function () {
        //    var rowsPerPage = $(this).val(); // Get the selected value from the dropdown
        //    var currentUrl = window.location.href.split('?')[0];  // Get the base URL without query parameters
        //    var newUrl = currentUrl + "?rowsPerPage=" + rowsPerPage;  // Add rowsPerPage as a query parameter to the URL
        //    loadPage(newUrl);  // Load the page with the updated URL (AJAX load)
        //});

        $('#searchForm').submit(function (e) {
            e.preventDefault();  //-- Prevent default form submission
            var url = $(this).attr('action') + '?' + $(this).serialize();  //-- Serialize form data and add it to the URL
            loadPage(url);  //-- Load the page with AJAX
        });

        //-- Function to load page content dynamically
        function loadPage(url) {
            // Add the rowsPerPage parameter to the URL if not already there
            //var rowsPerPage = $('#rowsPerPage').val();  // Get the selected value
            //var newUrl = url + "&rowsPerPage=" + rowsPerPage;  // Append rowsPerPage if it's not already in the URL
            $.ajax({
                url: url,  //-- Send the AJAX request to the specified URL
                type: "GET",  //-- Use the GET method for retrieving data
                success: function (data) {
                    // Update publisher list and pagination links dynamically
                    $('#publisherList').html($(data).find('#publisherList').html());
                    $('#paginationLinks').html($(data).find('#paginationLinks').html());
                }
            });
        }
        $(document).ready(function () {
            $('#exportButton').click(function () {
                window.location.href = '@Url.Action("ExportToExcel", "Export")';
            });
        });
        // Assuming you have jQuery and SweetAlert loaded
        $(document).ready(function () {
            $('.deleteButton').click(function () {
                const itemId = $(this).data('id'); // Retrieve the ID of the item to delete

                Swal.fire({
                    title: "Are you sure?",
                    text: "Once deleted, you will not be able to recover this item!",
                    icon: "warning",
                    showCancelButton: true, // Enable the cancel button
                    buttons: true,
                    dangerMode: true,
                })
                    .then((result) => {
                        if (result.isConfirmed) {
                            // Make an AJAX call to delete the item
                            $.ajax({
                                url: '/Publisher/Delete', // URL of your Delete method
                                type: 'POST', // Use POST for data modification
                                data: { id: itemId }, // Pass the ID as data
                                success: function (response) {
                                    //if (response.success) {
                                    //    Swal.fire("Deleted!", response.message, "success").then(() => {
                                    //        location.reload(); // Reload the page or update UI
                                    //    });
                                    //} else {
                                    //    Swal.fire("Error!", response.message, "error");
                                    //}
                                    Swal.fire("Poof! Your item has been deleted!", {
                                        icon: "success",
                                    }).then(() => {
                                        // Optional: Reload the page or update the UI
                                        location.reload();
                                    });
                                },
                                error: function (error) {
                                    Swal.fire("Error!", "Unable to delete the item. Please try again.", "error");
                                }
                            });
                        } else if(result.dismiss == Swal.DismissReason.cancel){
                            Swal.fire("Your item is safe!");
                        }
                    });
            });
        });
    </script>
    @if (!string.IsNullOrEmpty(TempData["SuccessMessage"] as string))
    {
        <script>
    $(document).ready(function () {
        var successMessage = '@TempData["SuccessMessage"]';
        if (successMessage.trim() !== '') {
            Swal.fire({
                icon: 'success',
                title: 'Success',
                text: successMessage,
                timer: 1000,
                timerProgressBar: true,
                showConfirmButton: false
            });
        }
    });
        </script>
    }

    @if (!string.IsNullOrEmpty(TempData["ErrorMessage"] as string))
    {
        <script>
    $(document).ready(function () {
        var errorMessage = '@TempData["ErrorMessage"]';
        if (errorMessage.trim() !== '') {
            Swal.fire({
                icon: 'error',
                title: 'Error',
                text: errorMessage,
                showConfirmButton: true // Show OK button
            });
        }
    });
        </script>
    }
}
